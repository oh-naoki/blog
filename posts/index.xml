<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on めも</title>
    <link>https://oh-naoki.github.io/blog/posts/</link>
    <description>Recent content in Posts on めも</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 05 Jul 2020 16:59:53 +0900</lastBuildDate>
    
	<atom:link href="https://oh-naoki.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Coroutines Flow で merge する</title>
      <link>https://oh-naoki.github.io/blog/posts/flow-merge/</link>
      <pubDate>Sun, 05 Jul 2020 16:59:53 +0900</pubDate>
      
      <guid>https://oh-naoki.github.io/blog/posts/flow-merge/</guid>
      <description>Coroutines Flow を使ったときに RxJava の Single を merge するオペレーションと同じことをする処理を書いたメモです。
flow ビルダーの中でmergeしたいApiの flow を emit するだけです。
fun main() { runBlocking { val api1 = flowOf(1) val api2 = flowOf(2) flow { emit(api1.single()) emit(api2.single()) }.collect { println(it) // output  // 1  // 2  } } } </description>
    </item>
    
    <item>
      <title>PorterDuff を使って角丸プログレスバーを作る</title>
      <link>https://oh-naoki.github.io/blog/posts/porter-duff/</link>
      <pubDate>Sun, 07 Jun 2020 08:03:20 +0900</pubDate>
      
      <guid>https://oh-naoki.github.io/blog/posts/porter-duff/</guid>
      <description>2つの画像を合成するときに使える PorterDuff を利用して角丸プログレスバー作りました
PorterDuff とは 2つの画像を組み合わせるときのいくつかのルールを提供している便利なスキーマみたいなものです(雑な理解)
 https://developer.android.com/reference/android/graphics/PorterDuff.Mode  例えば、大きさの異なる2つの円を用意して PorterDuff を使えばドーナッツみたいにくり抜くこともできます。
PorterDuff を利用して角丸プログレスバーを作る Githubで検索すると角丸プログレスバーはいくつかでてくるのですが、両端が角丸になっているものが多かったので片側(進行方向)は垂直に切れているプログレスバーを作ってみることにしました。
手順はまず初めに背景となる角丸の Retangle を描画してその上にプログレスバーとなる角丸ではない Rectangle を描画します。 描画する際に使用する Paint に重ね合わせるときのルールを指定することで背景画像に対してどう切り取るか、描画順序はどうするかを決めることができます。
leftBarPaint = Paint().apply { color = leftColor xfermode = PorterDuffXfermode(PorterDuff.Mode.SRC_IN) } rightBarPaint = Paint().apply { color = rightColor xfermode = PorterDuffXfermode(PorterDuff.Mode.SRC_IN) } backgroundPaint = Paint().apply { color = Color.BLACK } canvas.drawRoundRect( 0F, 0F, this.width.toFloat(), this.height.toFloat(), radius.px(), radius.px(), backgroundPaint ) canvas.drawRoundRect( progressCurrentWidth.toFloat(), 0F, this.width.toFloat(), this.height.toFloat(), 0F, 0F, rightBarPaint ) canvas.</description>
    </item>
    
  </channel>
</rss>